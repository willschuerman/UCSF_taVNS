ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT))+
geom_histogram(binwidth=1)+
facet_grid(subject~values.trialtype,scales='free')+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.trialtype,scales='free')+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.latencytype,scales='free')+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.responsetype,scales='free')+
ggpubr::theme_pubclean()
ggplot(data[data$blockcode=='practice',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.responsetype,scales='free')+
ggpubr::theme_pubclean()
ggplot(data[data$blockcode=='practice',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.dostim,scales='free')+
ggpubr::theme_pubclean()
names(data)
data$values.amp
data$values.dostim
ggplot(data[data$blockcode=='SART',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.dostim,scales='free')+
ggpubr::theme_pubclean()
data$values.response
data$response
max(data$values.RT[data$values.RT<500])
data$values.RT
ggplot(data[data$blockcode=='SART',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~.,scales='free')+
ggpubr::theme_pubclean()
ggplot(data[data$blockcode=='SART',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~values.dostim,scales='free')+
ggpubr::theme_pubclean()
min(data$values.RT[data$values.RT>500])
ggplot(data[data$blockcode=='SART',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~,scales='free')+
ggplot(data[data$blockcode=='SART',],aes(x=values.RT))+
geom_histogram(binwidth=30)+
facet_grid(subject~.,scales='free')+
ggpubr::theme_pubclean()
data_dir <- getwd()
data_dir <- sub('/Code/R','/Data/SART_Microstudy',data_dir)
file_names <- list.files(path=data_dir,pattern='*.csv')
file_names
library(hablar)
library(stringr)
library(Rmisc)
library(zoo)
library(tidyverse)
myPalette <- c("#8961b3","#b55960","#999c47")
# define custom functions
adjust_idx <- function(idx,btrial){
# check that idx isn't greater than limits of vector
idx_start = idx-4
if(idx_start<1){
idx_start = 1
}
idx_stop = idx+4
if(idx_stop>length(btrial)){
idx_stop=length(btrial)
}
# # check that idx doesn't cross block boundaries (changed to looping over blocks)
# while(btrial[idx_start]>btrial[idx]){
#   idx_start=idx_start+1
# }
# while(btrial[idx_stop]<btrial[idx]){
#   idx_stop=idx_stop-1
# }
return(c(idx_start,idx_stop))
}
get_event_matrix <- function(idx_vector,data_vector,btrial){
event_matrix = matrix(data=NA,nrow=length(idx_vector),ncol=9)
counter <- 1
for(idx in idx_vector){
idx_start_stop <- adjust_idx(idx,btrial)
midx_start <- 5-(idx-idx_start_stop[1])
midx_stop <- 5+(idx_start_stop[2]-idx)
event_matrix[counter,seq(midx_start,midx_stop)] <- data_vector[seq(idx_start_stop[1],idx_start_stop[2])]
counter <- counter+1
}
return(event_matrix)
}
make_event_df <- function(idx,RT,btrial,matrix_names,event_type){
if(!is_empty(idx)){
RT = get_event_matrix(idx,RT,btrial)
event_df <- data.frame(RT)
names(event_df) <- matrix_names
event_df <- reshape2::melt(event_df)
event_df$type <- event_type
}else{
event_df <- data.frame(matrix(ncol=3,nrow=0))
names(event_df) <- c('variable','value','type')
}
return(event_df)
}
# need to add block ids
calc_event_metrics <- function(accuracy,RT,anticipations,commissions,omissions,btrial,trialcode){
matrix_names <- c('t-4','t-3','t-2','t-1','t0','t+1','t+2','t+3','t+4')
# find ids of errors and collect RTs
idx = which(accuracy==0)
event_data <-  make_event_df(idx,RT,btrial,matrix_names,'error')
# find ids of correct trials and collect RTs
idx = which(accuracy==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'correct')
event_data <- rbind(event_data,tmp)
# find ids of go trials and collect RTs
idx = which(trialcode=='go')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'go')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(trialcode=='nogo')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'nogo')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(anticipations==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'anticipation')
event_data <- rbind(event_data,tmp)
# find ids of commissions and collect RTs
idx = which(commissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'commission')
event_data <- rbind(event_data,tmp)
# find ids of omissions and collect RTs
idx = which(omissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'omission')
event_data <- rbind(event_data,tmp)
# clean up data frame
names(event_data) <- c('time','RT','type')
event_data$time <- factor(event_data$time,levels = matrix_names)
return(event_data)
}
# define custom color palette
myPalette <- c("#8961b3","#b55960","#999c47")
data_dir <- getwd()
data_dir <- sub('/Code/R','/Data/SART_Microstudy',data_dir)
file_names <- list.files(path=data_dir,pattern='*.csv')
#### prepare data ####
make_table=1
for(f in file_names){
tmp <- read_csv(str_c(data_dir,'/',f))
tmp <- tmp %>% retype()
tmp$stimblock = 0
if(any(tmp$blocknum>0)){
if(all(tmp$subject %% 2 == 0)){
tmp[tmp$blocknum<3,]$stimblock =1
}else{
tmp[tmp$blocknum>2,]$stimblock =1
}
}
if(make_table==1){
data <- tmp
make_table=0
}else{
data <- rbind(data,tmp)
}
}
# fix PID for first participant
data[data$subject==101,]$subject <- 501
# create trial number within block variable
data <- data %>% group_by(subject,blocknum) %>% mutate(btrial = row_number())
# change variables to factors
data$stimblock <- as.factor(data$stimblock)
data$subject <- as.factor(data$subject)
library(hablar)
library(stringr)
library(Rmisc)
library(zoo)
library(tidyverse)
myPalette <- c("#8961b3","#b55960","#999c47")
# define custom functions
adjust_idx <- function(idx,btrial){
# check that idx isn't greater than limits of vector
idx_start = idx-4
if(idx_start<1){
idx_start = 1
}
idx_stop = idx+4
if(idx_stop>length(btrial)){
idx_stop=length(btrial)
}
# # check that idx doesn't cross block boundaries (changed to looping over blocks)
# while(btrial[idx_start]>btrial[idx]){
#   idx_start=idx_start+1
# }
# while(btrial[idx_stop]<btrial[idx]){
#   idx_stop=idx_stop-1
# }
return(c(idx_start,idx_stop))
}
get_event_matrix <- function(idx_vector,data_vector,btrial){
event_matrix = matrix(data=NA,nrow=length(idx_vector),ncol=9)
counter <- 1
for(idx in idx_vector){
idx_start_stop <- adjust_idx(idx,btrial)
midx_start <- 5-(idx-idx_start_stop[1])
midx_stop <- 5+(idx_start_stop[2]-idx)
event_matrix[counter,seq(midx_start,midx_stop)] <- data_vector[seq(idx_start_stop[1],idx_start_stop[2])]
counter <- counter+1
}
return(event_matrix)
}
make_event_df <- function(idx,RT,btrial,matrix_names,event_type){
if(!is_empty(idx)){
RT = get_event_matrix(idx,RT,btrial)
event_df <- data.frame(RT)
names(event_df) <- matrix_names
event_df <- reshape2::melt(event_df)
event_df$type <- event_type
}else{
event_df <- data.frame(matrix(ncol=3,nrow=0))
names(event_df) <- c('variable','value','type')
}
return(event_df)
}
# need to add block ids
calc_event_metrics <- function(accuracy,RT,anticipations,commissions,omissions,btrial,trialcode){
matrix_names <- c('t-4','t-3','t-2','t-1','t0','t+1','t+2','t+3','t+4')
# find ids of errors and collect RTs
idx = which(accuracy==0)
event_data <-  make_event_df(idx,RT,btrial,matrix_names,'error')
# find ids of correct trials and collect RTs
idx = which(accuracy==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'correct')
event_data <- rbind(event_data,tmp)
# find ids of go trials and collect RTs
idx = which(trialcode=='go')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'go')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(trialcode=='nogo')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'nogo')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(anticipations==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'anticipation')
event_data <- rbind(event_data,tmp)
# find ids of commissions and collect RTs
idx = which(commissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'commission')
event_data <- rbind(event_data,tmp)
# find ids of omissions and collect RTs
idx = which(omissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'omission')
event_data <- rbind(event_data,tmp)
# clean up data frame
names(event_data) <- c('time','RT','type')
event_data$time <- factor(event_data$time,levels = matrix_names)
return(event_data)
}
# define custom color palette
myPalette <- c("#8961b3","#b55960","#999c47")
data_dir <- getwd()
data_dir <- sub('/Code/R','/Data/SART_Microstudy',data_dir)
file_names <- list.files(path=data_dir,pattern='*.csv')
#### prepare data ####
make_table=1
for(f in file_names){
tmp <- read_csv(str_c(data_dir,'/',f))
tmp <- tmp %>% retype()
tmp$stimblock = 0
if(any(tmp$blocknum>0)){
if(all(tmp$subject %% 2 == 0)){
tmp[tmp$blocknum<3,]$stimblock =1
}else{
tmp[tmp$blocknum>2,]$stimblock =1
}
}
data$filenumber <- f
if(make_table==1){
data <- tmp
make_table=0
}else{
data <- rbind(data,tmp)
}
}
#### prepare data ####
make_table=1
for(f in file_names){
tmp <- read_csv(str_c(data_dir,'/',f))
tmp <- tmp %>% retype()
tmp$stimblock = 0
if(any(tmp$blocknum>0)){
if(all(tmp$subject %% 2 == 0)){
tmp[tmp$blocknum<3,]$stimblock =1
}else{
tmp[tmp$blocknum>2,]$stimblock =1
}
}
tmp$filenumber <- f
if(make_table==1){
data <- tmp
make_table=0
}else{
data <- rbind(data,tmp)
}
}
# fix PID for first participant
data[data$subject==101,]$subject <- 501
file_names
# create trial number within block variable
data <- data %>% group_by(subject,blocknum) %>% mutate(btrial = row_number())
# change variables to factors
data$stimblock <- as.factor(data$stimblock)
data$subject <- as.factor(data$subject)
ggplot(data,aes(x=values.RT))+
geom_hist()+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT))+
geom_histogram()+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,color=filename))+
geom_histogram()+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,color=filenumber))+
geom_histogram()+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'),labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'),title=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'),text=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'))+
scale_fill_discrete(labelst=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'))+
scale_fill_discrete(labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
values.RT
data$values.RT
data[,c('values.RT','filenumber')]
library(hablar)
library(stringr)
library(Rmisc)
library(zoo)
library(tidyverse)
myPalette <- c("#8961b3","#b55960","#999c47")
# define custom functions
adjust_idx <- function(idx,btrial){
# check that idx isn't greater than limits of vector
idx_start = idx-4
if(idx_start<1){
idx_start = 1
}
idx_stop = idx+4
if(idx_stop>length(btrial)){
idx_stop=length(btrial)
}
# # check that idx doesn't cross block boundaries (changed to looping over blocks)
# while(btrial[idx_start]>btrial[idx]){
#   idx_start=idx_start+1
# }
# while(btrial[idx_stop]<btrial[idx]){
#   idx_stop=idx_stop-1
# }
return(c(idx_start,idx_stop))
}
get_event_matrix <- function(idx_vector,data_vector,btrial){
event_matrix = matrix(data=NA,nrow=length(idx_vector),ncol=9)
counter <- 1
for(idx in idx_vector){
idx_start_stop <- adjust_idx(idx,btrial)
midx_start <- 5-(idx-idx_start_stop[1])
midx_stop <- 5+(idx_start_stop[2]-idx)
event_matrix[counter,seq(midx_start,midx_stop)] <- data_vector[seq(idx_start_stop[1],idx_start_stop[2])]
counter <- counter+1
}
return(event_matrix)
}
make_event_df <- function(idx,RT,btrial,matrix_names,event_type){
if(!is_empty(idx)){
RT = get_event_matrix(idx,RT,btrial)
event_df <- data.frame(RT)
names(event_df) <- matrix_names
event_df <- reshape2::melt(event_df)
event_df$type <- event_type
}else{
event_df <- data.frame(matrix(ncol=3,nrow=0))
names(event_df) <- c('variable','value','type')
}
return(event_df)
}
# need to add block ids
calc_event_metrics <- function(accuracy,RT,anticipations,commissions,omissions,btrial,trialcode){
matrix_names <- c('t-4','t-3','t-2','t-1','t0','t+1','t+2','t+3','t+4')
# find ids of errors and collect RTs
idx = which(accuracy==0)
event_data <-  make_event_df(idx,RT,btrial,matrix_names,'error')
# find ids of correct trials and collect RTs
idx = which(accuracy==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'correct')
event_data <- rbind(event_data,tmp)
# find ids of go trials and collect RTs
idx = which(trialcode=='go')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'go')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(trialcode=='nogo')
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'nogo')
event_data <- rbind(event_data,tmp)
# find ids of anticipations and collect RTs
idx = which(anticipations==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'anticipation')
event_data <- rbind(event_data,tmp)
# find ids of commissions and collect RTs
idx = which(commissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'commission')
event_data <- rbind(event_data,tmp)
# find ids of omissions and collect RTs
idx = which(omissions==1)
tmp <-  make_event_df(idx,RT,btrial,matrix_names,'omission')
event_data <- rbind(event_data,tmp)
# clean up data frame
names(event_data) <- c('time','RT','type')
event_data$time <- factor(event_data$time,levels = matrix_names)
return(event_data)
}
# define custom color palette
myPalette <- c("#8961b3","#b55960","#999c47")
data_dir <- getwd()
data_dir <- sub('/Code/R','/Data/SART_Microstudy',data_dir)
file_names <- list.files(path=data_dir,pattern='*.csv')
#### prepare data ####
make_table=1
for(f in file_names){
tmp <- read_csv(str_c(data_dir,'/',f))
tmp <- tmp %>% retype()
tmp$stimblock = 0
if(any(tmp$blocknum>0)){
if(all(tmp$subject %% 2 == 0)){
tmp[tmp$blocknum<3,]$stimblock =1
}else{
tmp[tmp$blocknum>2,]$stimblock =1
}
}
tmp$filename <- f
if(make_table==1){
data <- tmp
make_table=0
}else{
data <- rbind(data,tmp)
}
}
# fix PID for first participant
data[data$subject==101,]$subject <- 501
# create trial number within block variable
data <- data %>% group_by(subject,blocknum) %>% mutate(btrial = row_number())
# change variables to factors
data$stimblock <- as.factor(data$stimblock)
data$subject <- as.factor(data$subject)
#### Visualize raw RT data ####
ggplot(data,aes(x=values.RT,fill=filenumber))+
geom_histogram()+
facet_wrap(c('filenumber'))+
scale_fill_discrete(labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=subject))+
geom_histogram()+
facet_wrap(c('subject'))+
scale_fill_discrete(labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=subject))+
geom_histogram()+
facet_wrap(c('subject'))+
scale_fill_discrete(name = '',labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()
ggplot(data,aes(x=values.RT,fill=subject))+
geom_histogram()+
facet_wrap(c('subject'))+
scale_fill_discrete(name = '',labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()+
xlabel('Reaction Time (ms)')
ggplot(data,aes(x=values.RT,fill=subject))+
geom_histogram()+
facet_wrap(c('subject'))+
scale_fill_discrete(name = '',labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()+
xlab('Reaction Time (ms)')
ggplot(data,aes(x=values.RT,fill=subject))+
geom_histogram()+
facet_wrap(c('subject'))+
scale_fill_discrete(name = '',labels=c('New RT logger','Old RT Logger'))+
ggpubr::theme_pubclean()+
xlab('Reaction Time (ms)')+
ylab('Count')
data_dir <- getwd()
data_dir <- sub('/Code/R','/Data/SART_Microstudy/Behavior',data_dir)
